{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n * `emptyTags` (default is none)\n *   An array of XML tag names that should be autoclosed with '/>'.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function (cm, val, old) {\n    if (old != CodeMirror.Init && old) cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {\n      name: \"autoCloseTags\"\n    };\n    if (typeof val != \"object\" || val.whenClosing !== false) map[\"'/'\"] = function (cm) {\n      return autoCloseSlash(cm);\n    };\n    if (typeof val != \"object\" || val.whenOpening !== false) map[\"'>'\"] = function (cm) {\n      return autoCloseGT(cm);\n    };\n    cm.addKeyMap(map);\n  });\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(),\n      replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head,\n        tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state),\n        state = inner.state;\n      var tagInfo = inner.mode.xmlCurrentTag && inner.mode.xmlCurrentTag(state);\n      var tagName = tagInfo && tagInfo.name;\n      if (!tagName) return CodeMirror.Pass;\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = typeof opt == \"object\" && opt.dontCloseTags || html && htmlDontClose;\n      var indentTags = typeof opt == \"object\" && opt.indentTags || html && htmlIndent;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName || tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) || tok.type == \"tag\" && tagInfo.close || tok.string.indexOf(\"/\") == pos.ch - tok.start - 1 ||\n      // match something like <someTagName />\n      dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 || closingTagExists(cm, inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state) || [], tagName, pos, true)) return CodeMirror.Pass;\n      var emptyTags = typeof opt == \"object\" && opt.emptyTags;\n      if (emptyTags && indexOf(emptyTags, tagName) > -1) {\n        replacements[i] = {\n          text: \"/>\",\n          newPos: CodeMirror.Pos(pos.line, pos.ch + 2)\n        };\n        continue;\n      }\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {\n        indent: indent,\n        text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n        newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)\n      };\n    }\n    var dontIndentOnAutoClose = typeof opt == \"object\" && opt.dontIndentOnAutoClose;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {\n        head: info.newPos,\n        anchor: info.newPos\n      };\n      cm.setSelections(sel);\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(),\n      replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = typeof opt == \"object\" && opt.dontIndentOnSlash;\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head,\n        tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state),\n        state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" || tok.start != pos.ch - 1)) return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement,\n        mixed = inner.mode.name != \"xml\" && cm.getMode().name == \"htmlmixed\";\n      if (mixed && inner.mode.name == \"javascript\") {\n        replacement = head + \"script\";\n      } else if (mixed && inner.mode.name == \"css\") {\n        replacement = head + \"style\";\n      } else {\n        var context = inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state);\n        var top = context.length ? context[context.length - 1] : \"\";\n        if (!context || context.length && closingTagExists(cm, context, top, pos)) return CodeMirror.Pass;\n        replacement = head + top;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    if (!dontIndentOnAutoClose) {\n      for (var i = 0; i < ranges.length; i++) if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line) cm.indentLine(ranges[i].head.line);\n    }\n  }\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n  CodeMirror.commands.closeTag = function (cm) {\n    return autoCloseCurrent(cm);\n  };\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i) if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, context, tagName, pos, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    var onCx = newTag ? 1 : 0;\n    for (var i = context.length - 1; i >= 0; i--) {\n      if (context[i] == tagName) ++onCx;else break;\n    }\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineOption","cm","val","old","Init","removeKeyMap","map","name","whenClosing","autoCloseSlash","whenOpening","autoCloseGT","addKeyMap","htmlDontClose","htmlIndent","getOption","Pass","ranges","listSelections","replacements","opt","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","tagInfo","mode","xmlCurrentTag","tagName","html","configuration","dontCloseTags","indentTags","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","close","indexOf","start","closingTagExists","xmlCurrentContext","emptyTags","text","newPos","Pos","line","indent","dontIndentOnAutoClose","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseCurrent","typingSlash","dontIndentOnSlash","replacement","mixed","context","top","getLine","replaceSelections","commands","closeTag","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","onCx","to","next"],"sources":["/Users/kailashgautham/Documents/GitHub/hackandroll/code_editor/node_modules/codemirror/addon/edit/closetag.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n * `emptyTags` (default is none)\n *   An array of XML tag names that should be autoclosed with '/>'.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing !== false)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening !== false)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      var tagInfo = inner.mode.xmlCurrentTag && inner.mode.xmlCurrentTag(state)\n      var tagName = tagInfo && tagInfo.name\n      if (!tagName) return CodeMirror.Pass\n\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && tagInfo.close ||\n          tok.string.indexOf(\"/\") == (pos.ch - tok.start - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state) || [], tagName, pos, true))\n        return CodeMirror.Pass;\n\n      var emptyTags = typeof opt == \"object\" && opt.emptyTags;\n      if (emptyTags && indexOf(emptyTags, tagName) > -1) {\n        replacements[i] = { text: \"/>\", newPos: CodeMirror.Pos(pos.line, pos.ch + 2) };\n        continue;\n      }\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnAutoClose);\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnSlash);\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement, mixed = inner.mode.name != \"xml\" && cm.getMode().name == \"htmlmixed\"\n      if (mixed && inner.mode.name == \"javascript\") {\n        replacement = head + \"script\";\n      } else if (mixed && inner.mode.name == \"css\") {\n        replacement = head + \"style\";\n      } else {\n        var context = inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state)\n        var top = context.length ? context[context.length - 1] : \"\"\n        if (!context || (context.length && closingTagExists(cm, context, top, pos)))\n          return CodeMirror.Pass;\n        replacement = head + top\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    if (!dontIndentOnAutoClose) {\n        for (var i = 0; i < ranges.length; i++)\n            if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n                cm.indentLine(ranges[i].head.line);\n    }\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, context, tagName, pos, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    var onCx = newTag ? 1 : 0\n    for (var i = context.length - 1; i >= 0; i--) {\n      if (context[i] == tagName) ++onCx\n      else break\n    }\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}