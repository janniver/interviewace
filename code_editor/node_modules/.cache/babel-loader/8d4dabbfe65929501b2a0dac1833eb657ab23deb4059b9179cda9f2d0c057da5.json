{"ast":null,"code":"let mediaRecorder;\nlet audioChunks = [];\n\n// Start recording from the microphone\nasync function startRecording() {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.start();\n    mediaRecorder.ondataavailable = event => {\n      audioChunks.push(event.data);\n    };\n    mediaRecorder.addEventListener(\"stop\", () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/mpeg'\n      });\n      displayRecordedAudio(audioBlob);\n      audioChunks = [];\n    });\n\n    // Stop recording after 5 seconds\n    setTimeout(() => mediaRecorder.stop(), 5000);\n  } catch (error) {\n    console.error('Error starting audio recording:', error);\n  }\n}\nexport default startRecording;\n\n// Display the recorded audio for playback\nfunction displayRecordedAudio(audioBlob) {\n  const audioUrl = URL.createObjectURL(audioBlob);\n  const audio = new Audio(audioUrl);\n  audio.controls = true;\n  document.body.appendChild(audio);\n  audio.play();\n}\n\n// Start the recording process","map":{"version":3,"names":["mediaRecorder","audioChunks","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","start","ondataavailable","event","push","data","addEventListener","audioBlob","Blob","type","displayRecordedAudio","setTimeout","stop","error","console","audioUrl","URL","createObjectURL","Audio","controls","document","body","appendChild","play"],"sources":["/Users/kailashgautham/Documents/GitHub/hackandroll/code_editor/src/components/Audio.js"],"sourcesContent":["let mediaRecorder;\nlet audioChunks = [];\n\n// Start recording from the microphone\nasync function startRecording() {\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.start();\n\n        mediaRecorder.ondataavailable = event => {\n            audioChunks.push(event.data);\n        };\n\n        mediaRecorder.addEventListener(\"stop\", () => {\n            const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n            displayRecordedAudio(audioBlob);\n            audioChunks = [];\n        });\n\n        // Stop recording after 5 seconds\n        setTimeout(() => mediaRecorder.stop(), 5000);\n    } catch (error) {\n        console.error('Error starting audio recording:', error);\n    }\n}\n\nexport default startRecording;\n\n// Display the recorded audio for playback\nfunction displayRecordedAudio(audioBlob) {\n    const audioUrl = URL.createObjectURL(audioBlob);\n    const audio = new Audio(audioUrl);\n    audio.controls = true;\n    document.body.appendChild(audio);\n    audio.play();\n}\n\n// Start the recording process\n"],"mappings":"AAAA,IAAIA,aAAa;AACjB,IAAIC,WAAW,GAAG,EAAE;;AAEpB;AACA,eAAeC,cAAcA,CAAA,EAAG;EAC5B,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzEP,aAAa,GAAG,IAAIQ,aAAa,CAACL,MAAM,CAAC;IACzCH,aAAa,CAACS,KAAK,CAAC,CAAC;IAErBT,aAAa,CAACU,eAAe,GAAGC,KAAK,IAAI;MACrCV,WAAW,CAACW,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;IAChC,CAAC;IAEDb,aAAa,CAACc,gBAAgB,CAAC,MAAM,EAAE,MAAM;MACzC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACf,WAAW,EAAE;QAAEgB,IAAI,EAAE;MAAa,CAAC,CAAC;MAC/DC,oBAAoB,CAACH,SAAS,CAAC;MAC/Bd,WAAW,GAAG,EAAE;IACpB,CAAC,CAAC;;IAEF;IACAkB,UAAU,CAAC,MAAMnB,aAAa,CAACoB,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;EAChD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EAC3D;AACJ;AAEA,eAAenB,cAAc;;AAE7B;AACA,SAASgB,oBAAoBA,CAACH,SAAS,EAAE;EACrC,MAAMQ,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACV,SAAS,CAAC;EAC/C,MAAMR,KAAK,GAAG,IAAImB,KAAK,CAACH,QAAQ,CAAC;EACjChB,KAAK,CAACoB,QAAQ,GAAG,IAAI;EACrBC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACvB,KAAK,CAAC;EAChCA,KAAK,CAACwB,IAAI,CAAC,CAAC;AAChB;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}