{"ast":null,"code":"const silenceThreshold = -60; // in dB, threshold for considering silence\nconst silenceTime = 5000; // time in ms to wait for silence before stopping the recording\nlet silenceStart = null;\nlet audioChunks = [];\nlet mediaRecorder;\n\n// Start recording from the microphone\nasync function startRecording() {\n  console.log(\"suck my fat penis\");\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const audioContext = new AudioContext();\n    const source = audioContext.createMediaStreamSource(stream);\n    const processor = audioContext.createScriptProcessor(4096, 1, 1);\n    source.connect(processor);\n    processor.connect(audioContext.destination);\n    mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.start();\n    mediaRecorder.ondataavailable = event => audioChunks.push(event.data);\n    processor.onaudioprocess = event => {\n      const input = event.inputBuffer.getChannelData(0);\n      let sum = 0.0;\n      for (let i = 0; i < input.length; ++i) {\n        sum += input[i] * input[i];\n      }\n      const instantVolume = Math.log10(sum / input.length) * 10;\n      checkSilence(instantVolume);\n    };\n  } catch (error) {\n    console.error('Error starting audio recording:', error);\n  }\n}\nexport default startRecording;\n\n// Check for silence\nfunction checkSilence(volume) {\n  if (volume < silenceThreshold) {\n    if (!silenceStart) {\n      silenceStart = new Date().getTime();\n    } else {\n      const elapsed = new Date().getTime() - silenceStart;\n      if (elapsed > silenceTime) {\n        stopRecording();\n        silenceStart = null;\n      }\n    }\n  } else {\n    silenceStart = null;\n  }\n}\n\n// Stop the recording and process the audio\nfunction stopRecording() {\n  mediaRecorder.stop();\n  mediaRecorder.onstop = () => {\n    const audioBlob = new Blob(audioChunks, {\n      type: 'audio/wav'\n    });\n    sendAudioToBackend(audioBlob);\n    audioChunks = [];\n  };\n}\n\n// Send the audio blob to the backend\nfunction sendAudioToBackend(audioBlob) {\n  // const formData = new FormData();\n  // formData.append(\"audio\", audioBlob);\n\n  // fetch(\"http://your-backend-url.com/audio-endpoint\", {\n  //     method: \"POST\",\n  //     body: formData\n  // })\n  // .then(response => response.json())\n  // .then(data => console.log(\"Response from backend:\", data))\n  // .catch(error => console.error(\"Error sending audio to backend:\", error));\n  console.log(audioBlob);\n}\n\n// Start the recording process","map":{"version":3,"names":["silenceThreshold","silenceTime","silenceStart","audioChunks","mediaRecorder","startRecording","console","log","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","AudioContext","source","createMediaStreamSource","processor","createScriptProcessor","connect","destination","MediaRecorder","start","ondataavailable","event","push","data","onaudioprocess","input","inputBuffer","getChannelData","sum","i","length","instantVolume","Math","log10","checkSilence","error","volume","Date","getTime","elapsed","stopRecording","stop","onstop","audioBlob","Blob","type","sendAudioToBackend"],"sources":["/Users/kailashgautham/Documents/GitHub/hackandroll/code_editor/src/components/Audio.js"],"sourcesContent":["const silenceThreshold = -60; // in dB, threshold for considering silence\nconst silenceTime = 5000; // time in ms to wait for silence before stopping the recording\nlet silenceStart = null;\nlet audioChunks = [];\nlet mediaRecorder;\n\n// Start recording from the microphone\nasync function startRecording() {\n    console.log(\"suck my fat penis\")\n    try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const audioContext = new AudioContext();\n        const source = audioContext.createMediaStreamSource(stream);\n        const processor = audioContext.createScriptProcessor(4096, 1, 1);\n        \n        source.connect(processor);\n        processor.connect(audioContext.destination);\n\n        mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.start();\n        mediaRecorder.ondataavailable = event => audioChunks.push(event.data);\n\n        processor.onaudioprocess = event => {\n            const input = event.inputBuffer.getChannelData(0);\n            let sum = 0.0;\n\n            for (let i = 0; i < input.length; ++i) {\n                sum += input[i] * input[i];\n            }\n\n            const instantVolume = Math.log10(sum / input.length) * 10;\n            checkSilence(instantVolume);\n        };\n    } catch (error) {\n        console.error('Error starting audio recording:', error);\n    }\n}\n\nexport default startRecording;\n\n// Check for silence\nfunction checkSilence(volume) {\n    if (volume < silenceThreshold) {\n        if (!silenceStart) {\n            silenceStart = new Date().getTime();\n        } else {\n            const elapsed = new Date().getTime() - silenceStart;\n            if (elapsed > silenceTime) {\n                stopRecording();\n                silenceStart = null;\n            }\n        }\n    } else {\n        silenceStart = null;\n    }\n}\n\n// Stop the recording and process the audio\nfunction stopRecording() {\n    mediaRecorder.stop();\n    mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n        sendAudioToBackend(audioBlob);\n        audioChunks = [];\n    };\n}\n\n// Send the audio blob to the backend\nfunction sendAudioToBackend(audioBlob) {\n    // const formData = new FormData();\n    // formData.append(\"audio\", audioBlob);\n\n    // fetch(\"http://your-backend-url.com/audio-endpoint\", {\n    //     method: \"POST\",\n    //     body: formData\n    // })\n    // .then(response => response.json())\n    // .then(data => console.log(\"Response from backend:\", data))\n    // .catch(error => console.error(\"Error sending audio to backend:\", error));\n    console.log(audioBlob);\n}\n\n// Start the recording process\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}